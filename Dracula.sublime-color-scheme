{
    "name": "Dracula",
    "author": "Zeno Rocha",
    "variables":
    {
        "black": "#000000",
        "black2": "#222218",
        "blue": "#6272a4",
        "blue2": "#44475a",
        "blue3": "#282a36",
        "cyan": "#66d9ef",
        "cyan2": "#6be5fd",
        "cyan3": "#8be9fd",
        "green": "#50fa7b",
        "grey": "#3b3a32",
        "orange": "#ffb86c",
        "orange2": "#9d550f",
        "pink": "#ff79c6",
        "purple": "#bd93f9",
        "red": "#ff5555",
        "red2": "#f83333",
        "white": "#ffffff",
        "white2": "#eeeeee",
        "white3": "#f8f8f0",
        "white4": "#f8f8f2",
        "yellow": "#f1fa8c",
        "yellow2": "#effb7b",
        "yellow3": "#e6db74",
        "yellow4": "#cfcfc2"
    },
    "globals":
    {
        "foreground": "var(white4)",
        "background": "var(blue3)",
        "caret": "var(white3)",
        "invisibles": "var(grey)",
        "line_highlight": "var(blue2)",
        "selection": "var(blue2)",
        "selection_border": "var(black2)",
        "active_guide": "color(var(orange2) alpha(0.69))",
        "find_highlight_foreground": "var(black)",
        "find_highlight": "var(yellow2)",
        "brackets_options": "underline",
        "brackets_foreground": "color(var(white4) alpha(0.65))",
        "bracket_contents_options": "underline",
        "bracket_contents_foreground": "color(var(white4) alpha(0.65))",
        "tags_options": "stippled_underline"
    },
    "rules":
    [
        {
            "name": "Comment",
            "scope": "comment",
            "foreground": "var(blue)"
        },
        {
            "name": "String",
            "scope": "string",
            "foreground": "var(yellow)"
        },
        {
            "name": "Number",
            "scope": "constant.numeric",
            "foreground": "var(purple)"
        },
        {
            "name": "Built-in constant",
            "scope": "constant.language",
            "foreground": "var(purple)"
        },
        {
            "name": "User-defined constant",
            "scope": "constant.character, constant.other",
            "foreground": "var(purple)"
        },
        {
            "name": "Variable",
            "scope": "variable"
        },
        {
            "name": "String interpolation",
            "scope": "constant.character.escaped, constant.character.escape, string source, string source.ruby",
            "foreground": "var(pink)"
        },
        {
            "name": "Keyword",
            "scope": "keyword",
            "foreground": "var(pink)"
        },
        {
            "name": "Storage",
            "scope": "storage",
            "foreground": "var(pink)"
        },
        {
            "name": "Storage Type Namespace",
            "scope": "storage.type.namespace",
            "foreground": "var(cyan3)",
            "font_style": "italic"
        },
        {
            "name": "Storage Type Class",
            "scope": "storage.type.class",
            "foreground": "var(pink)",
            "font_style": "italic"
        },
        {
            "name": "Class name",
            "scope": "entity.name.class",
            "foreground": "var(cyan3)",
            "font_style": ""
        },
        {
            "name": "Interface name",
            "scope": "entity.name.interface",
            "foreground": "var(cyan3)",
            "font_style": "italic"
        },
        {
            "name": "Function name",
            "scope": "entity.name.function",
            "foreground": "var(green)"
        },
        {
            "name": "Meta Path",
            "scope": "meta.path",
            "foreground": "var(cyan)",
            "font_style": "underline"
        },
        {
            "name": "Inherited class",
            "scope": "entity.other.inherited-class",
            "foreground": "var(cyan3)",
            "font_style": "italic underline"
        },
        {
            "name": "Function argument",
            "scope": "variable.parameter",
            "foreground": "var(orange)",
            "font_style": "italic"
        },
        {
            "name": "Tag name",
            "scope": "entity.name.tag",
            "foreground": "var(pink)"
        },
        {
            "name": "Tag attribute",
            "scope": "entity.other.attribute-name",
            "foreground": "var(green)"
        },
        {
            "name": "Library function",
            "scope": "support.function",
            "foreground": "var(cyan3)"
        },
        {
            "name": "Library constant",
            "scope": "support.constant",
            "foreground": "var(cyan2)"
        },
        {
            "name": "Library class/type",
            "scope": "support.type, support.class",
            "foreground": "var(cyan)",
            "font_style": "italic"
        },
        {
            "name": "Library variable",
            "scope": "support.other.variable"
        },
        {
            "name": "Support Other Namespace",
            "scope": "support.other.namespace",
            "foreground": "var(cyan)",
            "font_style": "italic"
        },
        {
            "name": "Invalid",
            "scope": "invalid",
            "foreground": "var(white3)",
            "background": "var(pink)"
        },
        {
            "name": "Invalid deprecated",
            "scope": "invalid.deprecated",
            "foreground": "var(white3)",
            "background": "var(purple)"
        },
        {
            "name": "diff.header",
            "scope": "meta.diff, meta.diff.header",
            "foreground": "var(blue)"
        },
        {
            "name": "diff.deleted",
            "scope": "markup.deleted",
            "foreground": "var(pink)"
        },
        {
            "name": "diff.inserted",
            "scope": "markup.inserted",
            "foreground": "var(green)"
        },
        {
            "name": "diff.changed",
            "scope": "markup.changed",
            "foreground": "var(yellow3)"
        },
        {
            "scope": "constant.numeric.line-number.find-in-files - match",
            "foreground": "var(purple)"
        },
        {
            "scope": "entity.name.filename",
            "foreground": "var(yellow3)"
        },
        {
            "scope": "message.error",
            "foreground": "var(red2)"
        },
        {
            "name": "Markup: strike",
            "scope": "markup.strike",
            "foreground": "var(orange)",
            "font_style": "italic"
        },
        {
            "name": "Markup: bold",
            "scope": "markup.bold",
            "foreground": "var(orange)",
            "font_style": "bold"
        },
        {
            "name": "Markup: italic",
            "scope": "markup.italic",
            "foreground": "var(orange)",
            "font_style": "italic"
        },
        {
            "name": "Markup: raw inline",
            "scope": "text.html.markdown markup.raw.inline",
            "foreground": "var(green)"
        },
        {
            "name": "Markup: underline",
            "scope": "markup.underline",
            "foreground": "var(purple)",
            "font_style": "underline"
        },
        {
            "name": "Markup: Raw block",
            "scope": "markup.raw.block",
            "foreground": "var(yellow4)"
        },
        {
            "name": "Punctuation Accessor",
            "scope": "punctuation.accessor",
            "foreground": "var(white)"
        },
        {
            "name": "Meta Function Return Type",
            "scope": "meta.function.return-type",
            "foreground": "var(pink)"
        },
        {
            "name": "Punctuation Section Block Begin",
            "scope": "punctuation.section.block.begin",
            "foreground": "var(white)"
        },
        {
            "name": "Punctuation Section Block End",
            "scope": "punctuation.section.block.end",
            "foreground": "var(white)"
        },
        {
            "name": "Punctuation Section Embedded Begin",
            "scope": "punctuation.section.embedded.begin",
            "foreground": "var(pink)"
        },
        {
            "name": "Punctuation Section Embedded End",
            "scope": "punctuation.section.embedded.end",
            "foreground": "var(pink)"
        },
        {
            "name": "Punctuation Separator Namespace",
            "scope": "punctuation.separator.namespace",
            "foreground": "var(pink)"
        },
        {
            "name": "Punctuation Separator Type",
            "scope": "punctuation.separator.type",
            "foreground": "var(pink)"
        },
        {
            "name": "Punctuation Separator Key-Value",
            "scope": "punctuation.separator.key-value",
            "foreground": "var(pink)"
        },
        {
            "name": "Variable Function",
            "scope": "variable.function",
            "foreground": "var(green)"
        },
        {
            "name": "Variable Other",
            "scope": "variable.other",
            "foreground": "var(white)"
        },
        {
            "name": "Variable Language",
            "scope": "variable.language",
            "foreground": "var(purple)",
            "font_style": "italic"
        },
        // LANGUAGE DEFINTIONS
        //
        // Ruby
        {
            "name": "[Ruby] Entity Name Module",
            "scope": "entity.name.module.ruby",
            "foreground": "var(cyan3)"
        },
        {
            "name": "[Ruby] Entity Name Constant",
            "scope": "entity.name.constant.ruby",
            "foreground": "var(purple)"
        },
        {
            "name": "[Ruby] Support Function Builtin",
            "scope": "support.function.builtin.ruby",
            "foreground": "var(white)"
        },
        {
            "name": "[Ruby] Regexp",
            "scope": "source.ruby string.regexp.classic.ruby,source.ruby string.regexp.mod-r.ruby",
            "foreground": "var(red)"
        },
        {
            "name": "[Ruby] @variable",
            "scope": "variable.other.readwrite.instance",
            "foreground": "var(orange)"
        },
        {
          "name": "[Ruby] Built-in function calls",
          "scope": "support.function.builtin.ruby",
          "foreground": "var(cyan)"
        },
        // C# / C-Sharp
        {
            "name": "[CS] Storage Type Namespace",
            "scope": "storage.type.namespace.cs",
            "foreground": "var(pink)"
        },
        {
          // ST is missing support for `keyword.other.get.cs`
          // (i.e. getters and setters within ST), so no highlighting
          // at the moment.
        },
        // Markdown
        {
            "name": "[Markdown] Raw Block fenced source",
            "scope": "markup.raw.block.fenced.markdown source",
            "foreground": "var(white4)"
        },
        {
            "name": "[Markdown] Fenced Code Block",
            "scope": "punctuation.definition.fenced.markdown, variable.language.fenced.markdown",
            "foreground": "var(blue)",
            "font_style": "italic"
        },
        {
            "name": "[Markdown] Fenced Code Block",
            "scope": "punctuation.definition.raw.code-fence.begin, punctuation.definition.raw.code-fence.end",
            "foreground": "var(green)",
            "font_style": "italic"
        },
        {
            "name": "[Markdown] Fenced Language",
            "scope": "variable.language.fenced.markdown",
            "foreground": "var(blue)",
            "font_style": "italic"
        },
        {
            "name": "[Markdown] Heading",
            "scope": "markup.heading",
            "foreground": "var(purple)",
            "font_style": "bold"
        },
        {
            // Markdown - Lists
            // Technically, a list in VS Code is styled as white, not pink.
            // Left in, because it kinda doesn't make sense _not_ to
            // (i.e. it's an enhancement compared to VS Code).
            // 
            // I've also added the numbered list into this selector also
            // (e.g. `1. Hello`, with `1.` being highlighted).
            "name": "[Markdown] List Items Punctuation",
            "scope": "punctuation.definition.list_item.markdown, text.html.markdown markup.list.numbered.bullet.markdown",
            "foreground": "var(pink)"
        },
        {
            "name": "[Markdown] Blockquote",
            "scope": "markup.quote",
            "foreground": "var(yellow)",
            "font_style": "italic"
        },
        {
            "name": "[Markdown] Blockquote Punctuation",
            "scope": "punctuation.definition.blockquote.markdown",
            "foreground": "var(yellow)",
            "background": "none", // Not sure why this doesn't apply?
            "font_style": "italic"
        },
        {
            "name": "[Markdown] Separator",
            "scope": "meta.separator",
            "foreground": "var(blue)"
        },
        // Swift
        // Note: Swift is missing a lot of scope targets to be able to be
        // useful.
        {
            "name": "[Swift] Storage Type",
            "scope": "storage.type.swift",
            "foreground": "var(pink)",
            "font_style": ""
        },
        {
            "name": "[Swift] Entity Type Function",
            "scope": "entity.type.function.swift",
            "foreground": "var(green)",
            "font_style": ""
        },
        {
            "name": "[Swift] Storage Type Function",
            "scope": "storage.type.function.swift",
            "foreground": "var(pink)",
            "font_style": ""
        },
        // JavaScript / TypeScript
        {
            "name": "[JavaScript] Function as a Property (e.g. `test = () => {`)",
            "scope": "entity.name.function.js variable.other.readwrite.js",
            "foreground": "var(green)"
        },
        {
            "name": "[JavaScript] console access (e.g. `console`)",
            "scope": "support.type.object.console.js",
            "foreground": "var(purple)",
            "font_style": ""
        },
        {
            "name": "[JavaScript] console function access (e.g. `console.log()`)",
            "scope": "support.function.console.js",
            "foreground": "var(green)",
            "font_style": ""
        },
        {
            "name": "[JavaScript] Array Type Defintion (e.g. `test: string[]`)",
            "scope": "meta.type.js storage.modifier.array.js",
            "foreground": "var(white)",
            "font_style": ""
        },
        {
            "name": "[JavaScript] Getters and Setters",
            "scope": "meta.function.js storage.type.accessor.js",
            "foreground": "var(pink)",
            "font_style": ""
        },
        {
            "name": "[JavaScript] `const` Variable (e.g. `Dracula`)",
            "scope": "variable.other.constant.js",
            "foreground": "var(purple)",
            "font_style": ""
        },
        {
            "name": "[JavaScript] `new` Keyword",
            "scope": "keyword.operator.word.new.js",
            "font_style": "bold"
        },
        {
            "name": "[JavaScript] Class Constructor (e.g. `Vampire({`",
            "scope": "meta.function-call.constructor.js variable.type.js",
            "foreground": "var(cyan)"
        },
        {
            // VS Code can tell the difference between `const` calls,
            // and class calls. We can't distinguish between the two.
            "name": "[JavaScript] Class method call (e.g. `Dracula.calcAge();`)",
            "scope": "meta.function-call.method.js support.class.js",
            "foreground": "var(cyan)",
            "font_style": ""
        },
        // PHP
        {
            "name": "[PHP] Arrow Accessor",
            "scope": "punctuation.accessor.arrow.php",
            "foreground": "var(pink)"
        },
        {
            "name": "[PHP] Namespace Separator",
            "scope": "punctuation.separator.namespace.php",
            "font_style": ""
        },
        {
            // Not sure how/why this occurs? Underline across entire
            // namespace declaration
            "name": "[PHP] File Path/Namespace ",
            "scope": "meta.path.php",
            "font_style": ""
        },
        // Java
        {
            "name": "[Java] Class property type definition",
            "scope": "meta.field.type.java storage.type.class.java",
            "foreground": "var(cyan)"
        },
        {
            "name": "[Java] Class property type definition",
            "scope": "meta.field.type.java storage.modifier.array.java",
            "foreground": "var(white)"
        },
        {
            "name": "[Java] Function Argument Class Type (e.g. `public test(String test)`)",
            "scope": "meta.function.parameters.java storage.type.class.java",
            "foreground": "var(cyan)"
        },
        {
            "name": "[Java] Function Argument Class Type Array (e.g. `public test(String[] test)`)",
            "scope": "meta.function.parameters.java storage.modifier.array.java",
            "foreground": "var(white)"
        },
        {
            // According to VS Code, there is a difference between
            // `new Vampire({})` and a parameter of a class constructor.
            // However, I think this is just a bug with VS Code's
            // selectors, since VS Code seems to think it is a function,
            // and not a class constructor.
            "name": "[Java] New class instantiation (e.g. `new Vampire({`)",
            "scope": "meta.instantiation.java storage.type.class.java",
            "foreground": "var(cyan)"
        },
        // Python
        // 
        // Not sure there is anything to directly change - but
        // some of the styles don't match VS Code. However,
        // VS Code's styles still look wrong.
        //
        {},
        // SML
        // 
        // Both VS Code and Sublime Text don't support SML.
        {},
        // HTML
        // 
        // Wildly inconsistent in both editors. Both would need work
        // to be consistent. That, or draw on styles from IntelliJ?
        {},
        // Dart
        // 
        // Generics don't look right, but there isn't a selector
        // for Dart's generics. Neither do return types, but it does
        // look better, in comparison to VS Code.
        // (VS Code: pink, not italic, ST: cyan, italic)
        {},
        // CSS
        {
            "name": "[CSS] Numeric suffix (units) (e.g. `100px`)",
            "scope": "constant.numeric.suffix.css",
            "foreground": "var(pink)"
        },
        {
            "name": "[CSS] Named Colour Constant (e.g. `color: red;`)",
            "scope": "meta.property-value.css support.constant.color.w3c.standard.css",
            "foreground": "var(purple)"
        },
        {
            "name": "[CSS] Named Property Constant (e.g `font-style: normal;`)",
            "scope": "support.constant.property-value.css",
            "foreground": "var(purple)",
            "font_style": "italic"
        },
        {
            "name": "[CSS] Property Name (e.g. `font-style:`)",
            "scope": "support.type.property-name.css",
            "font_style": ""
        },
        {
            // VS Code seems broken, only making italic on the _last_
            // separator. This makes _both_ italicised.
            "name": "[CSS] Psuedo-Class and -Element separator (e.g. `:nth-child` or `::nth-child`)",
            "scope": "meta.selector.css punctuation.definition.pseudo-class.css, meta.selector.css punctuation.definition.pseudo-element.css",
            "foreground": "var(pink)",
            "font_style": "italic"
        },
        {
            // Technically, the default selector is italicised in VS Code,
            // but I've opted not to do that.
            "name": "[CSS] Pseudo-Class and -Element Name (e.g. `nth-child`)",
            "scope": "entity.other.pseudo-class.css, entity.other.pseudo-element.css",
            "foreground": "var(green)",
            "font_style": "italic"
        },
        // Rust
        // 
        // I don't know the language well enough to know how to structure
        // this - any help would be greatly appreciated!
        {},
        // Scala
        // 
        // Seems like ST's support is better than VS Code out of the box.
        {},
        // Go
        // 
        // Almost perfect support.
        {
            "name": "[Go] Type Name",
            "scope": "source.go entity.name.type.go",
            "foreground": "var(cyan)",
            "font_style": "italic"
        },
        // JSON
        // 
        // Not part of official tests, but I still want to correct this
        {
            "name": "[JSON] String (key, inner)",
            "scope": "meta.mapping.key.json string.quoted.double.json",
            "foreground": "var(cyan)"
        },
        {
            "name": "[JSON] String (key, outer)",
            "scope": "meta.mapping.key.json string.quoted.double.json punctuation.definition.string.begin.json, meta.mapping.key.json string.quoted.double.json punctuation.definition.string.end.json",
            "foreground": "var(cyan)"
        },
        {
            "name": "[JSON] String (value, inner)",
            "scope": "meta.mapping.value.json string.quoted.double.json",
            "foreground": "var(yellow)"
        },
        {
            "name": "[JSON] String (value, outer)",
            "scope": "meta.mapping.value.json string.quoted.double.json punctuation.definition.string.begin.json, meta.mapping.value.json string.quoted.double.json punctuation.definition.string.end.json",
            "foreground": "var(yellow)"
        },
        {
            "name": "[JSON] Punctuation",
            "scope": "punctuation.definition.string.begin.json - meta.structure.dictionary.value.json, punctuation.definition.string.end.json - meta.structure.dictionary.value.json",
            "foreground": "var(cyan3)"
        },
        {
            "name": "[JSON] Key-Value Separator",
            "scope": "punctuation.separator.mapping.key-value.json",
            "foreground": "var(pink)"
        },
        // These JSON rules don't apply anymore
        // 
        // If you need rules similar to these, either edit them in,
        // or use a plugin like RainbowBrackets.
        //
        // {
        //     "name": "[JSON] 6 deep",
        //     "scope": "meta meta meta meta meta meta meta.structure.dictionary.value string",
        //     "foreground": "var(green)"
        // },
        // {
        //     "name": "[JSON] 5 deep",
        //     "scope": "meta meta meta meta meta meta.structure.dictionary.value string",
        //     "foreground": "var(orange)"
        // },
        // {
        //     "name": "[JSON] 4 deep",
        //     "scope": "meta meta meta meta meta.structure.dictionary.value string",
        //     "foreground": "var(pink)"
        // },
        // {
        //     "name": "[JSON] 3 deep",
        //     "scope": "meta meta meta meta.structure.dictionary.value string",
        //     "foreground": "var(purple)"
        // },
        // {
        //     "name": "[JSON] 2 deep",
        //     "scope": "meta meta meta.structure.dictionary.value string",
        //     "foreground": "var(green)"
        // },
        // {
        //     "name": "[JSON] 1 deep",
        //     "scope": "meta meta.structure.dictionary.value string",
        //     "foreground": "var(orange)"
        // }
        {},
        // Kotlin
        // 
        // No default support in either VS Code or ST.
        {},
        // Elixir
        // 
        // No default support in either VS Code or ST.
        {},
        // C++ / C Plus Plus
        // 
        // Not too sure with the syntax - I think VS Code also gets some
        // colours wrong, but because I'm not acutely familiar with C++,
        // I'll try and mimic the behaviour into ST.
        {
            "name": "[C++] Double-colon Accessor",
            "scope": "punctuation.accessor.double-colon.c++",
            "foreground": "var(pink)"
        },
        {
            "name": "[C++] Generic (i.e. `vector<std::string>`)",
            "scope": "punctuation.section.generic.begin.c++, punctuation.section.generic.end.c++",
            "foreground": "var(pink)"
        },
        {
            "name": "[C++] Function call in constructor (?)",
            "scope": "meta.method.constructor.initializer-list.c++ variable.other.readwrite.member.c++",
            "foreground": "var(green)"
        },
        // Clojure
        // 
        // Not sure - I don't understand the language.
        // It's inconsistent, but not sure I can correct the styles.
        {},
        // SQL
        // 
        // I'm not sure VS Code has very good support for any SQL - all
        // SQL is pink? Should have some sort of highlighting.
        {},
    ]
}
